/**
 * Style generating functions
 */
import { IAvatarStyling, IBubbleStyling, IChatCustomStyle, IChatStyling, ISuggestedActionStyling } from '../interfaces';
import { IPvaChatConnectorConfig } from '../pva-chat-connector.props.autogenerated';

const getChatWrapperStyle = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    return <React.CSSProperties>{
        position: config.position || 'inherit',
        top: config.top ? config.top : 'inherit',
        right: config.right ? config.right : 'inherit',
        bottom: config.bottom ? config.bottom : 'inherit',
        left: config.left ? config.left : 'inherit',
        display: 'flex',
        height: config.chatHeight ? config.chatHeight : '80%',
        width: config.chatWidth ? config.chatWidth : 'inherit',
        justifyContent: 'flex-end',
        zIndex: 10000
    };
};

const getChatButtonStyle = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    return <React.CSSProperties>{
        display: 'flex',
        alignItems: 'center',
        backgroundColor: config.startChatButtonBackgroundColor || 'inherit',
        color: config.startChatButtonTextColor || 'inherit',
        borderColor: config.startChatButtonBorderColor || 'inherit',
        borderRadius: config.startChatButtonBorderRadius || '0px',
        borderStyle: config.startChatButtonBorderStyle || 'solid',
        borderWidth: config.startChatButtonBorderWidth ? config.startChatButtonBorderWidth : '0px',
        padding: config.storeLogoURL ? '2px 20px 2px 2px' : '10px 20px 10px 20px',
        cursor: 'pointer',
        outlineStyle: 'none',
        alignSelf: 'flex-end',
        boxShadow: '0 0 4px rgba(102,102,102,.5)',
        WebkitBoxShadow: '0 0 4px rgba(102,102,102,.5)',
        MozBoxShadow: '0 0 4px rgba(102,102,102,.5)'
    };
};

const getButtonStoreLogoStyle = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    return <React.CSSProperties>{
        backgroundColor: config.headerBackgroundColor || 'inherit',
        color: config.headerTextColor || 'inherit',
        borderRadius: '50%',
        padding: '11px',
        width: '30px',
        height: '30px',
        marginRight: '12px',
        borderStyle: 'solid',
        borderWidth: '1px',
        boxSizing: 'content-box'
    };
};

const getChatStoreLogoStyle = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    return <React.CSSProperties>{
        backgroundColor: config.headerBackgroundColor || 'inherit',
        color: config.headerTextColor || 'inherit',
        borderRadius: '50%',
        padding: '11px',
        width: '30px',
        height: '30px',
        margin: '5px 12px 5px 5px',
        alignSelf: 'center',
        borderStyle: 'solid',
        borderWidth: '1px',
        boxSizing: 'content-box'
    };
};

const getChatMessagesStyle = (config: IPvaChatConnectorConfig, minimized: boolean): React.CSSProperties => {
    return <React.CSSProperties>{
        display: minimized ? 'none' : 'block',
        backgroundColor: config.backgroundColor || 'White',
        height: '100%',
        width: '100%',
        boxSizing: 'border-box',
        position: 'relative'
    };
};

const getChatMessageHeader = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    config.chatHeaderHeight = config.chatHeaderHeight || '70px';
    return <React.CSSProperties>{
        backgroundColor: config.headerBackgroundColor || 'inherit',
        backgroundImage: `url("${config.headerBackgroundImageURL}")` || 'none',
        color: config.headerTextColor || 'inherit',
        backgroundRepeat: 'no-repeat',
        display: 'flex',
        alignItems: 'flex-start',
        flexDirection: 'row',
        width: '100%',
        position: 'absolute',
        top: config.chatHeaderHeight ? `-${config.chatHeaderHeight}` : '',
        height: config.chatHeaderHeight,
        borderColor: config.headerBackgroundColor ? config.headerBackgroundColor : 'inherit',
        borderStyle: config.chatBorderStyle ? config.chatBorderStyle : 'none',
        borderWidth: config.chatBorderWidth ? config.chatBorderWidth : '0px'
    };
};

const getMinimizeButtonStyle = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    config.chatHeaderHeight = config.chatHeaderHeight || '70px';
    return <React.CSSProperties>{
        borderTop: 'none',
        borderLeft: 'none',
        borderRight: 'none',
        borderBottom: `solid 2px ${config.headerTextColor || 'White'}`,
        backgroundColor: 'transparent',
        padding: '5px 10px 3px 10px',
        cursor: 'pointer',
        outlineStyle: 'none',
        marginTop: '7px',
        marginRight: '7px'
    };
};

const getCloseButtonStyle = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    config.chatHeaderHeight = config.chatHeaderHeight || '70px';
    return <React.CSSProperties>{
        border: 'none',
        color: config.headerTextColor || 'White',
        backgroundColor: 'transparent',
        padding: '0px 0px 0px 7px',
        cursor: 'pointer',
        outlineStyle: 'none',
        marginTop: '7px',
        marginRight: '7px'
    };
};

const getChatMessageContent = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    config.chatHeaderHeight = config.chatHeaderHeight || '70px';
    return <React.CSSProperties>{
        height: '100%',
        width: '100%',
        borderColor: config.chatBorderColor ? config.chatBorderColor : 'inherit',
        borderStyle: config.chatBorderStyle ? config.chatBorderStyle : 'none',
        borderWidth: config.chatBorderWidth ? config.chatBorderWidth : '0px'
    };
};

const getProactiveWrapperStyle = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    return <React.CSSProperties>{
        flexDirection: 'column',
        display: 'flex',
        justifyContent: 'flex-end'
    };
};

const getProactiveMessageHeader = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    config.chatHeaderHeight = config.chatHeaderHeight || '70px';
    return <React.CSSProperties>{
        backgroundColor: config.headerBackgroundColor || 'inherit',
        backgroundImage: `url("${config.headerBackgroundImageURL}")` || 'none',
        color: config.headerTextColor || 'inherit',
        backgroundRepeat: 'no-repeat',
        display: 'flex',
        alignItems: 'flex-start',
        flexDirection: 'row',
        boxSizing: 'border-box',
        width: '100%',
        height: config.chatHeaderHeight,
        borderColor: config.headerBackgroundColor ? config.headerBackgroundColor : 'inherit',
        borderStyle: config.chatBorderStyle ? config.chatBorderStyle : 'none',
        borderWidth: config.chatBorderWidth ? config.chatBorderWidth : '0px'
    };
};

const getProactiveMessageContent = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    config.chatHeaderHeight = config.chatHeaderHeight || '70px';
    return <React.CSSProperties>{
        width: '100%',
        padding: '10px 20px',
        boxSizing: 'border-box',
        borderColor: config.chatBorderColor ? config.chatBorderColor : 'inherit',
        borderStyle: config.chatBorderStyle ? config.chatBorderStyle : 'none',
        borderWidth: config.chatBorderWidth ? config.chatBorderWidth : '0px'
    };
};

const getProactiveButtonStyle = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    config.chatHeaderHeight = config.chatHeaderHeight || '70px';
    return <React.CSSProperties>{
        color: config.headerTextColor || 'inherit',
        cursor: 'pointer',
        padding: '5px 10px',
        outline: 'none',
        border: 'none',
        backgroundColor: config.headerBackgroundColor || 'inherit',
        borderRadius: '25px'
    };
};

const getRedDotStyle = (config: IPvaChatConnectorConfig): React.CSSProperties => {
    return <React.CSSProperties>{
        background: 'Red',
        borderRadius: '50%',
        height: '5px',
        width: '5px',
        position: 'absolute',
        right: '10px',
        bottom: '33px'
    };
};

/**
 * Generates styles for the chat wrapper, and proactive chat parts
 * @param config IPvaChatConnectorConfig
 * @param minimized boolean
 * @returns IChatCustomStyle
 */
export const getChatStyling = (config: IPvaChatConnectorConfig, minimized: boolean): IChatCustomStyle => {
    return <IChatCustomStyle>{
        ChatWrapperStyle: getChatWrapperStyle(config),
        ChatButtonStyle: getChatButtonStyle(config),
        ButtonStoreLogoStyle: getButtonStoreLogoStyle(config),
        ChatStoreLogoStyle: getChatStoreLogoStyle(config),
        ChatMessagesStyle: getChatMessagesStyle(config, minimized),
        ChatMessageHeader: getChatMessageHeader(config),
        MinimizeButtonStyle: getMinimizeButtonStyle(config),
        CloseButtonStyle: getCloseButtonStyle(config),
        ChatMessageContent: getChatMessageContent(config),
        ProactiveWrapperStyle: getProactiveWrapperStyle(config),
        ProactiveMessageHeader: getProactiveMessageHeader(config),
        ProactiveMessageContent: getProactiveMessageContent(config),
        ProactiveButtonStyle: getProactiveButtonStyle(config),
        RedDotStyle: getRedDotStyle(config)
    };
};

const fontFormat = (font?: string): string | undefined => {
    if (font && font.length > 0) {
        const arr = font.split(',');
        for (let i = 0; i < arr.length; i++) {
            arr[i] = `'${arr[i].trim()}'`;
        }
        font = arr.join(', ');
    } else {
        font = '\'Calibri\', \'Helvetica Neue\', \'Arial\', \'sans-serif\'';
    }

    return font;
};

const getBubbleStyling = (config: IPvaChatConnectorConfig): IBubbleStyling => {
    return {
        bubbleBackground: config.bubbleBackground || 'White',
        bubbleTextColor: config.bubbleTextColor || 'Black',
        bubbleBorderColor: config.bubbleBorderColor || '#e6e6e6',
        bubbleBorderRadius: config.bubbleBorderRadius || '2',
        bubbleBorderStyle: config.bubbleBorderStyle || 'solid',
        bubbleBorderWidth: config.bubbleBorderWidth || '1',
        bubbleFromUserBackground: config.bubbleFromUserBackground || 'White',
        bubbleFromUserTextColor: config.bubbleFromUserTextColor || 'Black',
        bubbleFromUserBorderColor: config.bubbleFromUserBorderColor || '#e6e6e6',
        bubbleFromUserBorderRadius: config.bubbleFromUserBorderRadius || '2',
        bubbleFromUserBorderStyle: config.bubbleFromUserBorderStyle || 'solid',
        bubbleFromUserBorderWidth: config.bubbleFromUserBorderWidth || '1'
    };
};

const getAvatarStyling = (config: IPvaChatConnectorConfig): IAvatarStyling => {
    return {
        avatarBorderRadius: config.avatarBorderRadius || '50%',
        avatarSize: config.avatarSize || '40',
        botAvatarBackgroundColor: config.botAvatarBackgroundColor || undefined,
        botAvatarImage: config.botAvatarImage || '',
        botAvatarInitials: config.botAvatarInitials || '',
        userAvatarBackgroundColor: config.userAvatarBackgroundColor || undefined,
        userAvatarImage: config.userAvatarImage || '',
        userAvatarInitials: config.userAvatarInitials || ''
    };
};

const getSuggestedActionStyling = (config: IPvaChatConnectorConfig): ISuggestedActionStyling => {
    return {
        suggestedActionLayout: config.suggestedActionLayout || 'carousel',
        suggestedActionBackground: config.suggestedActionBackground || 'White',
        suggestedActionTextColor: config.suggestedActionTextColor || null,
        suggestedActionBorderColor: config.suggestedActionBorderColor || undefined,
        suggestedActionBorderRadius: config.suggestedActionBorderRadius || 0,
        suggestedActionBorderStyle: config.suggestedActionBorderStyle || 'solid',
        suggestedActionBorderWidth: config.suggestedActionBorderWidth || 2
    };
};

/**
 * Generates style options for the Botframework-WebChat widget
 * @param config IPvaChatConnectorConfig
 * @returns IChatStyling
 */
export const getChatStyleOptions = (config: IPvaChatConnectorConfig): IChatStyling => {
    const bubbleStyling = getBubbleStyling(config);
    const avatarStyling = getAvatarStyling(config);
    const suggestedActionStyling = getSuggestedActionStyling(config);
    return {
        hideUploadButton: true,
        primaryFont: fontFormat(config.primaryFont),
        backgroundColor: config.backgroundColor || 'White',
        ...bubbleStyling,
        ...avatarStyling,
        ...suggestedActionStyling
    };
};