/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { buildMockModuleProps } from '@msdyn365-commerce/core-internal';
/// <reference types="jest" />

// tslint:disable-next-line:no-unused-variable
import * as React from 'react';
import * as renderer from 'react-test-renderer';

import PvaChatConnector from '../pva-chat-connector';
import { IPvaChatConnectorData } from '../pva-chat-connector.data';
import {
  IPvaChatConnectorConfig,
  IPvaChatConnectorProps
} from '../pva-chat-connector.props.autogenerated';

const mockData: IPvaChatConnectorData = {
  actionResponse: {
    text: 'Sample Response Data'
  }
};

const mockConfig: IPvaChatConnectorConfig = {
  position: 'absolute',
  proactiveChatEnabled: false,
  proactiveDefaultMessage: 'Hi',
  botFrameworkCDNURL: 'https://cdn.botframework.com/botframework-webchat/latest/webchat.js?v=1',
  botframeworkDirectlineTokenURL: 'https://directline.botframework.com/v3/directline/tokens/generate',
  powervaDirectlineTokenURL: 'https://directline.botframework.com/v3/directline/tokens/generate',
  anonymousUserName: 'Visitor',
  unableToLoadChatMessage: 'Unable to load chat...'
};

const mockActions = {};

describe('PvaChatConnector', () => {
  let moduleProps: IPvaChatConnectorProps<IPvaChatConnectorData>;
  beforeAll(() => {
    moduleProps = buildMockModuleProps(mockData, mockActions, mockConfig) as IPvaChatConnectorProps<IPvaChatConnectorData>;
  });
  it('renders correctly', () => {
    const component: renderer.ReactTestRenderer = renderer.create(
      <PvaChatConnector {...moduleProps} />
    );
    const tree: renderer.ReactTestRendererJSON[] | renderer.ReactTestRendererJSON | null = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
});
