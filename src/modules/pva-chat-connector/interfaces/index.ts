/**
 * MSDYN 365 PVA Chat Connector Interfaces
 */
import { IRequestContext } from '@msdyn365-commerce/core-internal/dist/types/interfaces/context/IRequestContext';
import { CSSProperties } from 'react';
import { IPvaChatConnectorViewProps } from '../pva-chat-connector';
import { IPvaChatConnectorConfig } from '../pva-chat-connector.props.autogenerated';

export interface IChatContextValue {
    value: string | number | boolean;
    isDisplayable: boolean;
}

export interface IChatContext {
    eCommerceCustAccountNumber: string;
    eCommerceCustEmail: string;
    eCommerceCustFirstName: string;
    eCommerceCustLastName: string;
    eCommerceCustFullName: string;
    eCommerceCustPageURL: string;
    eCommerceCustChatType: string;
    // Proactive chat
    eCommerceCustIsProactiveChat: string;
    eCommerceCustProactiveType: string;
    // Date Range
    eCommerceCustProactiveFromDate: string;
    eCommerceCustProactiveToDate: string;
    // From Specific Page
    eCommerceCustProactiveCameFromPage: string;
    // No. Page Visits
    eCommerceCustProactiveNumberOfVisits: string;
    // Specific Geography
    eCommerceCustProactiveCountryCode: string;
    // Specific Page
    // eCommerceCustProactiveSpecificPage: string;
    // Wait On Time
    eCommerceCustProactiveTimeOnPage: string;
    // Shopping cart amount
    eCommerceCustProactiveShoppingCartAmount: string;
    // Shopping cart number of items
    eCommerceCustProactiveShoppingCartNumberOfItems: string;
    // Shopping cart specific product
    eCommerceCustProactiveShoppingCartSpecificProduct: string;
}

export interface IProactiveContext {
    context: IChatContext;
    message: string | null;
    timeout: number;
}

export type TContextProvider = () => IChatContext;

export interface IProactiveChatTrigger {
    props: IPvaChatConnectorViewProps;
    context: IChatContext;
    getContextProvider(timeInSeconds: number): TContextProvider;
    getMessage(message: string): string;
}

export interface IProactiveData {
    enabled: boolean;
    timeout: number;
    message: string;
}

export interface IWindow {
    // tslint:disable-next-line:no-any
    Microsoft: any;
    // tslint:disable-next-line:no-any
    WebChat?: any;
    // contextProvider: TContextProvider;
}
export interface IChatCoreProps {
    // tslint:disable-next-line:no-any
    store: any;
    token: string;
    config: IPvaChatConnectorConfig;
    userId: string;
    onFetchToken(): void;
}

export interface IBubbleStyling {
    bubbleBackground: string;
    bubbleTextColor: string;
    bubbleBorderColor: string;
    bubbleBorderRadius: string;
    bubbleBorderStyle: string;
    bubbleBorderWidth: string;
    bubbleFromUserBackground: string;
    bubbleFromUserTextColor: string;
    bubbleFromUserBorderColor: string;
    bubbleFromUserBorderRadius: string;
    bubbleFromUserBorderStyle: string;
    bubbleFromUserBorderWidth: string;
}

export interface IAvatarStyling {
    avatarBorderRadius: string;
    avatarSize: string;
    botAvatarBackgroundColor: string | undefined;
    botAvatarImage: string;
    botAvatarInitials: string;
    userAvatarBackgroundColor: string | undefined;
    userAvatarImage: string;
    userAvatarInitials: string;
}

export interface ISuggestedActionStyling {
    suggestedActionLayout: string;
    suggestedActionBackground: string;
    suggestedActionTextColor: string | null;
    suggestedActionBorderColor: string | undefined;
    suggestedActionBorderRadius: number | string;
    suggestedActionBorderStyle: string;
    suggestedActionBorderWidth: number | string;
}

export interface IChatCustomStyle {
    ChatWrapperStyle: CSSProperties;
    ChatButtonStyle: CSSProperties;
    ButtonStoreLogoStyle: CSSProperties;
    ChatStoreLogoStyle: CSSProperties;
    ChatMessagesStyle: CSSProperties;
    ChatMessageHeader: CSSProperties;
    MinimizeButtonStyle: CSSProperties;
    CloseButtonStyle: CSSProperties;
    ChatMessageContent: CSSProperties;
    ProactiveWrapperStyle: CSSProperties;
    ProactiveMessageHeader: CSSProperties;
    ProactiveMessageContent: CSSProperties;
    ProactiveButtonStyle: CSSProperties;
    RedDotStyle: CSSProperties;
}

export interface IChatStyling {
    hideUploadButton: boolean;
    primaryFont: string | undefined;
    backgroundColor: string;

    bubbleBackground: string;
    bubbleTextColor: string;
    bubbleBorderColor: string;
    bubbleBorderRadius: string;
    bubbleBorderStyle: string;
    bubbleBorderWidth: string;
    bubbleFromUserBackground: string;
    bubbleFromUserTextColor: string;
    bubbleFromUserBorderColor: string;
    bubbleFromUserBorderRadius: string;
    bubbleFromUserBorderStyle: string;
    bubbleFromUserBorderWidth: string;

    avatarBorderRadius: string;
    avatarSize: string;
    botAvatarBackgroundColor: string | undefined;
    botAvatarImage: string;
    botAvatarInitials: string;
    userAvatarBackgroundColor: string | undefined;
    userAvatarImage: string;
    userAvatarInitials: string;

    suggestedActionLayout: string;
    suggestedActionBackground: string;
    suggestedActionTextColor: string | null;
    suggestedActionBorderColor: string | undefined;
    suggestedActionBorderRadius: number | string;
    suggestedActionBorderStyle: string;
    suggestedActionBorderWidth: number | string;
}
// WebChat interfaces
export interface IPayload {
    id?: string;
    level?: string;
    name?: string;
    // tslint:disable-next-line:no-any
    value?: any;
    // tslint:disable-next-line:no-any
    activity?: any;
    text?: string;
    // tslint:disable-next-line:no-any
    data?: any;
    message?: string;
}
export interface IAction {
    type: string;
    payload: IPayload;
}
export type IDispatch = (action: IAction) => void;
export type INext = (action: IAction) => IDispatch;

export interface IExtendedRequest extends IRequestContext {
    suggestedMarket: string;
}
